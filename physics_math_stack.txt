║         3I/ATLAS - PHYSICS & MATHEMATICS STACK                           ║
      ╚══════════════════════════════════════════════════════════════════════════╝

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       1. ORBITAL MECHANICS - KEPLER'S EQUATIONS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Mean Motion (Mean Angular Velocity)
         n = 360° / P
         where: P = orbital period (days)
         Location: ThreeJSViewer.tsx:153

       ✦ Mean Anomaly (Position in Orbit at Time t)
         M = (M₀ + n·t) mod 360°
         where: M₀ = mean anomaly at epoch (J2000), t = time since epoch
         Location: ThreeJSViewer.tsx:156

       ✦ Kepler's Equation (Eccentric Anomaly via Newton's Method)
         M = E - e·sin(E)
         Iterative solution: E_{n+1} = M + e·sin(E_n)
         Iterations: 10 (sufficient for convergence)
         Location: ThreeJSViewer.tsx:160-163

       ✦ True Anomaly (Actual Angular Position)
         ν = 2·arctan2(√(1+e)·sin(E/2), √(1-e)·cos(E/2))
         Location: ThreeJSViewer.tsx:166-169

       ✦ Heliocentric Distance
         r = a(1 - e·cos(E))
         where: a = semi-major axis, e = eccentricity, E = eccentric anomaly
         Location: ThreeJSViewer.tsx:172

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       2. COORDINATE TRANSFORMATIONS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Orbital Plane Coordinates
         x_orb = r·cos(ν)
         y_orb = r·sin(ν)
         where: ν = true anomaly
         Location: ThreeJSViewer.tsx:175-176

       ✦ 3D Rotation Matrices (Orbital Elements → Heliocentric Ecliptic)
         x = x_orb·(cos(ω)cos(Ω) - sin(ω)sin(Ω)cos(i))
           - y_orb·(sin(ω)cos(Ω) + cos(ω)sin(Ω)cos(i))

         y = x_orb·(cos(ω)sin(Ω) + sin(ω)cos(Ω)cos(i))
           - y_orb·(sin(ω)sin(Ω) - cos(ω)cos(Ω)cos(i))

         z = x_orb·sin(ω)sin(i) + y_orb·cos(ω)sin(i)

         where: ω = argument of perihelion
                Ω = longitude of ascending node
                i = inclination
         Location: ThreeJSViewer.tsx:184-191

       ✦ Three.js Coordinate System Conversion
         Three.js: (x, y, z) → (x, z, -y)  [Y-up coordinate system]
         Location: ThreeJSViewer.tsx:193

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       3. TIME SYSTEMS & EPOCHS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ J2000.0 Epoch
         Reference: January 1, 2000, 12:00 TT (Terrestrial Time)
         Standard epoch for astronomical calculations

       ✦ Days Since J2000.0
         Δt = (t - t_J2000) / (86400 seconds)
         Location: ThreeJSViewer.tsx:197-202

       ✦ Julian Date (JD)
         Used in ephemeris data for precise time representation
         Location: horizons.py:28, 388

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       4. ORBITAL ENERGY & DYNAMICS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Gravitational Parameter of the Sun
         μ = GM☉ = 2.9591220828559093 × 10⁻⁴ AU³/day²
         Derived from: μ = 4π²/(T²) where T = 1 year = 365.25 days, a = 1 AU
         Location: ComparisonCharts.tsx:17

       ✦ Specific Orbital Energy (Vis-viva Equation)
         E = v²/2 - μ/r

         where: v = velocity magnitude = √(vx² + vy² + vz²)
                r = heliocentric distance (AU)
                μ = GM☉

         Units: AU²/day²

         Interpretation:
           E > 0  → Hyperbolic orbit (unbound, interstellar)
           E = 0  → Parabolic orbit (escape velocity)
           E < 0  → Elliptical orbit (bound to Sun)

         Location: ComparisonCharts.tsx:67-71

       ✦ Velocity Magnitude
         v = √(vx² + vy² + vz²)
         Location: ComparisonCharts.tsx:47, 67, 117

       ✦ Escape Velocity at Distance r
         v_esc = √(2μ/r)
         Location: ComparisonCharts.tsx:129

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       5. ORBITAL ELEMENTS (KEPLERIAN ELEMENTS)
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       Classical Orbital Elements:
         • a  = Semi-major axis (AU)
               For hyperbolic orbits: a < 0

         • e  = Eccentricity (dimensionless)
               e < 1: Ellipse (bound)
               e = 1: Parabola (escape)
               e > 1: Hyperbola (interstellar)

         • i  = Inclination (degrees)
               Angle between orbital plane and reference plane

         • Ω  = Longitude of ascending node (degrees)
               Where orbit crosses ecliptic, going north

         • ω  = Argument of perihelion (degrees)
               Angle from ascending node to perihelion

         • q  = Perihelion distance (AU)
               Closest approach to Sun: q = a(1-e)

         • M  = Mean anomaly (degrees)
               Uniform angular motion around orbit

         • n  = Mean motion (degrees/day)
               Angular velocity: n = 360°/P

         • P  = Orbital period (days)
               For elliptical orbits only (hyperbolic → ∞)

         Location: horizons.py:48-62, ThreeJSViewer.tsx:25-36

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       6. EPHEMERIS DATA (OBSERVATIONAL PARAMETERS)
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Position Coordinates
         • (x, y, z)   = Heliocentric ecliptic coordinates (AU)
         • (RA, DEC)   = Right Ascension, Declination (degrees)
         • r           = Distance from Sun (AU)
         • δ (delta)   = Distance from Earth (AU)

       ✦ Velocity Vectors
         • (vx, vy, vz) = Heliocentric velocity components (AU/day)

       ✦ Angular Measurements
         • Elongation       = Sun-Earth-Target angle
         • Phase angle      = Sun-Target-Observer angle
         • Visual magnitude = Apparent brightness (mag)

         Location: horizons.py:25-41

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       7. COMPUTATIONAL METHODS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Newton's Method (Kepler Equation Solver)
         Iterative root finding: x_{n+1} = x_n - f(x_n)/f'(x_n)
         Applied to: E - e·sin(E) - M = 0
         Convergence: 10 iterations → machine precision
         Location: ThreeJSViewer.tsx:160-163

       ✦ Linear Interpolation (Camera Movement)
         p_new = p_current + α(p_target - p_current)
         where: α = lerp factor (0.05 = smooth motion)
         Location: ThreeJSViewer.tsx:450, 455

       ✦ Data Throttling (Performance Optimization)
         step = ⌈N / N_max⌉
         Keep every step-th point when N > N_max
         Location: ThreeJSViewer.tsx:486-487

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       8. REFERENCE FRAMES
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Heliocentric Ecliptic Frame
         Origin: Center of the Sun
         Plane:  Earth's orbital plane (ecliptic)
         X-axis: Vernal equinox direction
         Z-axis: Perpendicular to ecliptic (north)

       ✦ Observer Frame (Geocentric/Topocentric)
         Origin: Earth center (@399) or other observer
         Used for: RA/DEC, magnitude, angular separation

       ✦ Coordinate System: J2000.0 (ICRF)
         International Celestial Reference Frame
         Fixed at epoch J2000.0

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       9. PHYSICAL CONSTANTS & UNITS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       Distance:
         • 1 AU (Astronomical Unit) = 149,597,870.7 km
         • Used for solar system scale measurements

       Time:
         • 1 day = 86,400 seconds
         • All velocities in AU/day

       Angular:
         • Degrees ↔ Radians conversion
         • deg2rad = π/180
         • rad2deg = 180/π

       Velocity:
         • AU/day = standard unit for orbital mechanics
         • 1 AU/day ≈ 1,731.46 km/s

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       10. STATISTICAL & ANALYTICAL CALCULATIONS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Average Velocity Over Trajectory
         v_avg = (Σ v_i) / N
         where: v_i = √(vx_i² + vy_i² + vz_i²)
         Location: ComparisonCharts.tsx:116-120

       ✦ Min/Max Distance Calculations
         r_min = min{r_i}
         r_max = max{r_i}
         Location: ComparisonCharts.tsx:122-126

       ✦ Orbit Type Classification
         if e > 1: Hyperbolic (Unbound)
         if e = 1: Parabolic
         if e < 1: Elliptical (Bound)
         Location: ComparisonCharts.tsx:141

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       11. VISUALIZATION MATHEMATICS
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✦ Camera Distance Calculation
         d = max(5, |p_focus| × 0.5)
         where: p_focus = position of focused object
         Location: ThreeJSViewer.tsx:440

       ✦ Camera Angle Positioning
         angle = arctan2(z, x)
         camera_x = p_x × 0.3 + cos(angle + π/4) × d
         camera_z = p_z × 0.3 + sin(angle + π/4) × d
         camera_y = d × 0.4
         Location: ThreeJSViewer.tsx:443-446

       ✦ Orbital Path Point Generation
         Generate 200 points uniformly over one orbital period
         t_i = (i/200) × P, for i = 0 to 200
         Location: ThreeJSViewer.tsx:315-318

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       SUMMARY - KEY PHYSICS PRINCIPLES
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       ✓ Two-body problem (Kepler's laws)
       ✓ Conservation of energy (vis-viva equation)
       ✓ Coordinate transformations (3D rotations)
       ✓ Numerical methods (Newton's method)
       ✓ Reference frame conversions (ecliptic ↔ equatorial)
       ✓ Time systems (J2000.0, Julian Date, UTC)
       ✓ Hyperbolic trajectories (interstellar objects)
       ✓ Gravitational dynamics (Sun-dominated)
       ✓ Ephemeris calculations (JPL Horizons integration)
       ✓ Statistical analysis (avg velocity, distances)
